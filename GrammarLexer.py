# Generated from Grammar.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,43,274,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,1,0,1,0,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,
        6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,
        12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,
        15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,
        18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,
        23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,27,4,27,175,8,
        27,11,27,12,27,176,1,28,4,28,180,8,28,11,28,12,28,181,1,28,1,28,
        1,29,4,29,187,8,29,11,29,12,29,188,1,30,4,30,192,8,30,11,30,12,30,
        193,1,30,1,30,4,30,198,8,30,11,30,12,30,199,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,3,31,211,8,31,1,32,1,32,1,32,1,33,1,33,
        1,33,1,33,1,33,3,33,221,8,33,5,33,223,8,33,10,33,12,33,226,9,33,
        1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,5,35,237,8,35,10,35,
        12,35,240,9,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,5,36,
        251,8,36,10,36,12,36,254,9,36,1,36,1,36,1,37,1,37,5,37,260,8,37,
        10,37,12,37,263,9,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,
        1,42,2,238,252,0,43,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
        21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
        43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
        65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,
        1,0,6,1,0,59,59,3,0,10,10,13,13,32,32,1,0,48,57,4,0,10,10,13,13,
        34,34,92,92,3,0,65,90,95,95,97,122,5,0,45,45,48,57,65,90,95,95,97,
        122,285,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,
        0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
        0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,
        0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,
        0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,
        0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,
        0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,
        0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,
        0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,1,87,1,0,0,0,3,89,1,0,
        0,0,5,96,1,0,0,0,7,103,1,0,0,0,9,105,1,0,0,0,11,107,1,0,0,0,13,109,
        1,0,0,0,15,111,1,0,0,0,17,115,1,0,0,0,19,117,1,0,0,0,21,120,1,0,
        0,0,23,122,1,0,0,0,25,124,1,0,0,0,27,126,1,0,0,0,29,129,1,0,0,0,
        31,135,1,0,0,0,33,140,1,0,0,0,35,145,1,0,0,0,37,148,1,0,0,0,39,151,
        1,0,0,0,41,154,1,0,0,0,43,157,1,0,0,0,45,159,1,0,0,0,47,161,1,0,
        0,0,49,164,1,0,0,0,51,167,1,0,0,0,53,171,1,0,0,0,55,174,1,0,0,0,
        57,179,1,0,0,0,59,186,1,0,0,0,61,191,1,0,0,0,63,210,1,0,0,0,65,212,
        1,0,0,0,67,215,1,0,0,0,69,227,1,0,0,0,71,232,1,0,0,0,73,246,1,0,
        0,0,75,257,1,0,0,0,77,264,1,0,0,0,79,266,1,0,0,0,81,268,1,0,0,0,
        83,270,1,0,0,0,85,272,1,0,0,0,87,88,5,46,0,0,88,2,1,0,0,0,89,90,
        5,105,0,0,90,91,5,109,0,0,91,92,5,112,0,0,92,93,5,111,0,0,93,94,
        5,114,0,0,94,95,5,116,0,0,95,4,1,0,0,0,96,97,5,112,0,0,97,98,5,117,
        0,0,98,99,5,98,0,0,99,100,5,108,0,0,100,101,5,105,0,0,101,102,5,
        99,0,0,102,6,1,0,0,0,103,104,5,61,0,0,104,8,1,0,0,0,105,106,5,91,
        0,0,106,10,1,0,0,0,107,108,5,93,0,0,108,12,1,0,0,0,109,110,5,33,
        0,0,110,14,1,0,0,0,111,112,5,102,0,0,112,113,5,111,0,0,113,114,5,
        114,0,0,114,16,1,0,0,0,115,116,5,40,0,0,116,18,1,0,0,0,117,118,5,
        105,0,0,118,119,5,110,0,0,119,20,1,0,0,0,120,121,5,41,0,0,121,22,
        1,0,0,0,122,123,5,123,0,0,123,24,1,0,0,0,124,125,5,125,0,0,125,26,
        1,0,0,0,126,127,5,105,0,0,127,128,5,102,0,0,128,28,1,0,0,0,129,130,
        5,119,0,0,130,131,5,104,0,0,131,132,5,105,0,0,132,133,5,108,0,0,
        133,134,5,101,0,0,134,30,1,0,0,0,135,136,5,101,0,0,136,137,5,108,
        0,0,137,138,5,105,0,0,138,139,5,102,0,0,139,32,1,0,0,0,140,141,5,
        101,0,0,141,142,5,108,0,0,142,143,5,115,0,0,143,144,5,101,0,0,144,
        34,1,0,0,0,145,146,5,38,0,0,146,147,5,38,0,0,147,36,1,0,0,0,148,
        149,5,124,0,0,149,150,5,124,0,0,150,38,1,0,0,0,151,152,5,61,0,0,
        152,153,5,61,0,0,153,40,1,0,0,0,154,155,5,33,0,0,155,156,5,61,0,
        0,156,42,1,0,0,0,157,158,5,60,0,0,158,44,1,0,0,0,159,160,5,62,0,
        0,160,46,1,0,0,0,161,162,5,60,0,0,162,163,5,61,0,0,163,48,1,0,0,
        0,164,165,5,62,0,0,165,166,5,61,0,0,166,50,1,0,0,0,167,168,5,100,
        0,0,168,169,5,101,0,0,169,170,5,102,0,0,170,52,1,0,0,0,171,172,5,
        44,0,0,172,54,1,0,0,0,173,175,7,0,0,0,174,173,1,0,0,0,175,176,1,
        0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,177,56,1,0,0,0,178,180,7,1,
        0,0,179,178,1,0,0,0,180,181,1,0,0,0,181,179,1,0,0,0,181,182,1,0,
        0,0,182,183,1,0,0,0,183,184,6,28,0,0,184,58,1,0,0,0,185,187,7,2,
        0,0,186,185,1,0,0,0,187,188,1,0,0,0,188,186,1,0,0,0,188,189,1,0,
        0,0,189,60,1,0,0,0,190,192,7,2,0,0,191,190,1,0,0,0,192,193,1,0,0,
        0,193,191,1,0,0,0,193,194,1,0,0,0,194,195,1,0,0,0,195,197,5,46,0,
        0,196,198,7,2,0,0,197,196,1,0,0,0,198,199,1,0,0,0,199,197,1,0,0,
        0,199,200,1,0,0,0,200,62,1,0,0,0,201,202,5,116,0,0,202,203,5,114,
        0,0,203,204,5,117,0,0,204,211,5,101,0,0,205,206,5,102,0,0,206,207,
        5,97,0,0,207,208,5,108,0,0,208,209,5,115,0,0,209,211,5,101,0,0,210,
        201,1,0,0,0,210,205,1,0,0,0,211,64,1,0,0,0,212,213,3,67,33,0,213,
        214,5,34,0,0,214,66,1,0,0,0,215,224,5,34,0,0,216,223,8,3,0,0,217,
        220,5,92,0,0,218,221,9,0,0,0,219,221,5,0,0,1,220,218,1,0,0,0,220,
        219,1,0,0,0,221,223,1,0,0,0,222,216,1,0,0,0,222,217,1,0,0,0,223,
        226,1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,68,1,0,0,0,226,224,
        1,0,0,0,227,228,5,110,0,0,228,229,5,117,0,0,229,230,5,108,0,0,230,
        231,5,108,0,0,231,70,1,0,0,0,232,233,5,47,0,0,233,234,5,42,0,0,234,
        238,1,0,0,0,235,237,9,0,0,0,236,235,1,0,0,0,237,240,1,0,0,0,238,
        239,1,0,0,0,238,236,1,0,0,0,239,241,1,0,0,0,240,238,1,0,0,0,241,
        242,5,42,0,0,242,243,5,47,0,0,243,244,1,0,0,0,244,245,6,35,0,0,245,
        72,1,0,0,0,246,247,5,47,0,0,247,248,5,47,0,0,248,252,1,0,0,0,249,
        251,9,0,0,0,250,249,1,0,0,0,251,254,1,0,0,0,252,253,1,0,0,0,252,
        250,1,0,0,0,253,255,1,0,0,0,254,252,1,0,0,0,255,256,6,36,0,0,256,
        74,1,0,0,0,257,261,7,4,0,0,258,260,7,5,0,0,259,258,1,0,0,0,260,263,
        1,0,0,0,261,259,1,0,0,0,261,262,1,0,0,0,262,76,1,0,0,0,263,261,1,
        0,0,0,264,265,5,43,0,0,265,78,1,0,0,0,266,267,5,45,0,0,267,80,1,
        0,0,0,268,269,5,42,0,0,269,82,1,0,0,0,270,271,5,47,0,0,271,84,1,
        0,0,0,272,273,5,37,0,0,273,86,1,0,0,0,13,0,176,181,188,193,199,210,
        220,222,224,238,252,261,1,6,0,0
    ]

class GrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    SEMI = 28
    NL = 29
    NUM = 30
    FLOAT = 31
    BOOL = 32
    StringLiteral = 33
    UnterminatedStringLiteral = 34
    NULL = 35
    BlockComment = 36
    Comment = 37
    VARNAME = 38
    ADD = 39
    SUB = 40
    MUL = 41
    DIV = 42
    MOD = 43

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'.'", "'import'", "'public'", "'='", "'['", "']'", "'!'", "'for'", 
            "'('", "'in'", "')'", "'{'", "'}'", "'if'", "'while'", "'elif'", 
            "'else'", "'&&'", "'||'", "'=='", "'!='", "'<'", "'>'", "'<='", 
            "'>='", "'def'", "','", "'null'", "'+'", "'-'", "'*'", "'/'", 
            "'%'" ]

    symbolicNames = [ "<INVALID>",
            "SEMI", "NL", "NUM", "FLOAT", "BOOL", "StringLiteral", "UnterminatedStringLiteral", 
            "NULL", "BlockComment", "Comment", "VARNAME", "ADD", "SUB", 
            "MUL", "DIV", "MOD" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "SEMI", "NL", "NUM", "FLOAT", "BOOL", "StringLiteral", 
                  "UnterminatedStringLiteral", "NULL", "BlockComment", "Comment", 
                  "VARNAME", "ADD", "SUB", "MUL", "DIV", "MOD" ]

    grammarFileName = "Grammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


