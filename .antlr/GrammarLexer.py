# Generated from c:/Users/tartinger2025/Documents/Mythic Script/Grammar.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,35,231,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
        7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,
        1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,
        1,16,1,17,1,17,1,18,1,18,1,19,4,19,132,8,19,11,19,12,19,133,1,20,
        4,20,137,8,20,11,20,12,20,138,1,20,1,20,1,21,4,21,144,8,21,11,21,
        12,21,145,1,22,4,22,149,8,22,11,22,12,22,150,1,22,1,22,4,22,155,
        8,22,11,22,12,22,156,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        3,23,168,8,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,3,25,178,8,
        25,5,25,180,8,25,10,25,12,25,183,9,25,1,26,1,26,1,26,1,26,1,26,1,
        27,1,27,1,27,1,27,5,27,194,8,27,10,27,12,27,197,9,27,1,27,1,27,1,
        27,1,27,1,27,1,28,1,28,1,28,1,28,5,28,208,8,28,10,28,12,28,211,9,
        28,1,28,1,28,1,29,1,29,5,29,217,8,29,10,29,12,29,220,9,29,1,30,1,
        30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,2,195,209,0,35,1,1,3,
        2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,1,0,
        6,1,0,59,59,3,0,10,10,13,13,32,32,1,0,48,57,4,0,10,10,13,13,34,34,
        92,92,3,0,65,90,95,95,97,122,5,0,45,45,48,57,65,90,95,95,97,122,
        242,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
        0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
        1,71,1,0,0,0,3,73,1,0,0,0,5,80,1,0,0,0,7,87,1,0,0,0,9,89,1,0,0,0,
        11,91,1,0,0,0,13,93,1,0,0,0,15,95,1,0,0,0,17,98,1,0,0,0,19,104,1,
        0,0,0,21,106,1,0,0,0,23,108,1,0,0,0,25,111,1,0,0,0,27,114,1,0,0,
        0,29,117,1,0,0,0,31,120,1,0,0,0,33,124,1,0,0,0,35,126,1,0,0,0,37,
        128,1,0,0,0,39,131,1,0,0,0,41,136,1,0,0,0,43,143,1,0,0,0,45,148,
        1,0,0,0,47,167,1,0,0,0,49,169,1,0,0,0,51,172,1,0,0,0,53,184,1,0,
        0,0,55,189,1,0,0,0,57,203,1,0,0,0,59,214,1,0,0,0,61,221,1,0,0,0,
        63,223,1,0,0,0,65,225,1,0,0,0,67,227,1,0,0,0,69,229,1,0,0,0,71,72,
        5,46,0,0,72,2,1,0,0,0,73,74,5,105,0,0,74,75,5,109,0,0,75,76,5,112,
        0,0,76,77,5,111,0,0,77,78,5,114,0,0,78,79,5,116,0,0,79,4,1,0,0,0,
        80,81,5,112,0,0,81,82,5,117,0,0,82,83,5,98,0,0,83,84,5,108,0,0,84,
        85,5,105,0,0,85,86,5,99,0,0,86,6,1,0,0,0,87,88,5,61,0,0,88,8,1,0,
        0,0,89,90,5,91,0,0,90,10,1,0,0,0,91,92,5,93,0,0,92,12,1,0,0,0,93,
        94,5,33,0,0,94,14,1,0,0,0,95,96,5,105,0,0,96,97,5,102,0,0,97,16,
        1,0,0,0,98,99,5,119,0,0,99,100,5,104,0,0,100,101,5,105,0,0,101,102,
        5,108,0,0,102,103,5,101,0,0,103,18,1,0,0,0,104,105,5,40,0,0,105,
        20,1,0,0,0,106,107,5,41,0,0,107,22,1,0,0,0,108,109,5,38,0,0,109,
        110,5,38,0,0,110,24,1,0,0,0,111,112,5,124,0,0,112,113,5,124,0,0,
        113,26,1,0,0,0,114,115,5,61,0,0,115,116,5,61,0,0,116,28,1,0,0,0,
        117,118,5,33,0,0,118,119,5,61,0,0,119,30,1,0,0,0,120,121,5,100,0,
        0,121,122,5,101,0,0,122,123,5,102,0,0,123,32,1,0,0,0,124,125,5,123,
        0,0,125,34,1,0,0,0,126,127,5,125,0,0,127,36,1,0,0,0,128,129,5,44,
        0,0,129,38,1,0,0,0,130,132,7,0,0,0,131,130,1,0,0,0,132,133,1,0,0,
        0,133,131,1,0,0,0,133,134,1,0,0,0,134,40,1,0,0,0,135,137,7,1,0,0,
        136,135,1,0,0,0,137,138,1,0,0,0,138,136,1,0,0,0,138,139,1,0,0,0,
        139,140,1,0,0,0,140,141,6,20,0,0,141,42,1,0,0,0,142,144,7,2,0,0,
        143,142,1,0,0,0,144,145,1,0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,
        146,44,1,0,0,0,147,149,7,2,0,0,148,147,1,0,0,0,149,150,1,0,0,0,150,
        148,1,0,0,0,150,151,1,0,0,0,151,152,1,0,0,0,152,154,5,46,0,0,153,
        155,7,2,0,0,154,153,1,0,0,0,155,156,1,0,0,0,156,154,1,0,0,0,156,
        157,1,0,0,0,157,46,1,0,0,0,158,159,5,116,0,0,159,160,5,114,0,0,160,
        161,5,117,0,0,161,168,5,101,0,0,162,163,5,102,0,0,163,164,5,97,0,
        0,164,165,5,108,0,0,165,166,5,115,0,0,166,168,5,101,0,0,167,158,
        1,0,0,0,167,162,1,0,0,0,168,48,1,0,0,0,169,170,3,51,25,0,170,171,
        5,34,0,0,171,50,1,0,0,0,172,181,5,34,0,0,173,180,8,3,0,0,174,177,
        5,92,0,0,175,178,9,0,0,0,176,178,5,0,0,1,177,175,1,0,0,0,177,176,
        1,0,0,0,178,180,1,0,0,0,179,173,1,0,0,0,179,174,1,0,0,0,180,183,
        1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,52,1,0,0,0,183,181,1,
        0,0,0,184,185,5,110,0,0,185,186,5,117,0,0,186,187,5,108,0,0,187,
        188,5,108,0,0,188,54,1,0,0,0,189,190,5,47,0,0,190,191,5,42,0,0,191,
        195,1,0,0,0,192,194,9,0,0,0,193,192,1,0,0,0,194,197,1,0,0,0,195,
        196,1,0,0,0,195,193,1,0,0,0,196,198,1,0,0,0,197,195,1,0,0,0,198,
        199,5,42,0,0,199,200,5,47,0,0,200,201,1,0,0,0,201,202,6,27,0,0,202,
        56,1,0,0,0,203,204,5,47,0,0,204,205,5,47,0,0,205,209,1,0,0,0,206,
        208,9,0,0,0,207,206,1,0,0,0,208,211,1,0,0,0,209,210,1,0,0,0,209,
        207,1,0,0,0,210,212,1,0,0,0,211,209,1,0,0,0,212,213,6,28,0,0,213,
        58,1,0,0,0,214,218,7,4,0,0,215,217,7,5,0,0,216,215,1,0,0,0,217,220,
        1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,60,1,0,0,0,220,218,1,
        0,0,0,221,222,5,43,0,0,222,62,1,0,0,0,223,224,5,45,0,0,224,64,1,
        0,0,0,225,226,5,42,0,0,226,66,1,0,0,0,227,228,5,47,0,0,228,68,1,
        0,0,0,229,230,5,37,0,0,230,70,1,0,0,0,13,0,133,138,145,150,156,167,
        177,179,181,195,209,218,1,6,0,0
    ]

class GrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    SEMI = 20
    NL = 21
    NUM = 22
    FLOAT = 23
    BOOL = 24
    StringLiteral = 25
    UnterminatedStringLiteral = 26
    NULL = 27
    BlockComment = 28
    Comment = 29
    VARNAME = 30
    ADD = 31
    SUB = 32
    MUL = 33
    DIV = 34
    MOD = 35

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'.'", "'import'", "'public'", "'='", "'['", "']'", "'!'", "'if'", 
            "'while'", "'('", "')'", "'&&'", "'||'", "'=='", "'!='", "'def'", 
            "'{'", "'}'", "','", "'null'", "'+'", "'-'", "'*'", "'/'", "'%'" ]

    symbolicNames = [ "<INVALID>",
            "SEMI", "NL", "NUM", "FLOAT", "BOOL", "StringLiteral", "UnterminatedStringLiteral", 
            "NULL", "BlockComment", "Comment", "VARNAME", "ADD", "SUB", 
            "MUL", "DIV", "MOD" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "SEMI", "NL", 
                  "NUM", "FLOAT", "BOOL", "StringLiteral", "UnterminatedStringLiteral", 
                  "NULL", "BlockComment", "Comment", "VARNAME", "ADD", "SUB", 
                  "MUL", "DIV", "MOD" ]

    grammarFileName = "Grammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


